// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWM.EFCore;

namespace SWM.EFCore.Migrations
{
    [DbContext(typeof(SWMDbContext))]
    partial class SWMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SWM.Core.Accounts.AccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("StorageSize");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Free",
                            Price = 0m,
                            StorageSize = 10240,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Premium",
                            Price = 250m,
                            StorageSize = 512000,
                            Type = 2
                        });
                });

            modelBuilder.Entity("SWM.Core.Files.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("OwnerId");

                    b.Property<long>("ParentId");

                    b.Property<string>("Path");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SWM.Core.SharedFileEntity", b =>
                {
                    b.Property<long>("FileId");

                    b.Property<long>("UserId");

                    b.HasKey("FileId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("FileId", "UserId")
                        .IsUnique();

                    b.ToTable("SharedFiles");
                });

            modelBuilder.Entity("SWM.Core.Users.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FilesDirectory");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("Name");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("Surname");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.HasIndex("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SWM.Core.SharedFileEntity", b =>
                {
                    b.HasOne("SWM.Core.Files.FileEntity", "File")
                        .WithMany("UsersSharedFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SWM.Core.Users.UserEntity", "User")
                        .WithMany("UsersSharedFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SWM.Core.Users.UserEntity", b =>
                {
                    b.HasOne("SWM.Core.Accounts.AccountEntity", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
